use solana_program::{program_error::ProgramError, pubkey::Pubkey};
use solana_program_test::ProgramTest;

use solana_program_test::*;
use solana_sdk::signer::Signer;
use spl_associated_token_account::{
    get_associated_token_address, id, instruction::mint_to, processor::process_instruction,
};

use crate::program_test::tools::{ProgramTestBench, TestBenchProgram};

use self::cookies::{MintCookie, TokenAccountCookie, WalletCookie};

pub mod cookies;
pub mod tools;

#[allow(dead_code)]
pub fn program_test(token_mint_address: Pubkey) -> ProgramTest {
    let mut pc = ProgramTest::new(
        "spl_associated_token_account",
        id(),
        processor!(process_instruction),
    );

    // Add a token mint account
    //
    // The account data was generated by running:
    //      $ solana account EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v \
    //                       --output-file tests/fixtures/token-mint-data.bin
    //
    pc.add_account_with_file_data(
        token_mint_address,
        1461600,
        spl_token::id(),
        "token-mint-data.bin",
    );

    // Dial down the BPF compute budget to detect if the program gets bloated in the future
    pc.set_bpf_compute_max_units(50_000);

    pc
}

pub struct AssociatedTokenAccountProgramTest {
    pub bench: ProgramTestBench,
    pub program_id: Pubkey,
}

impl AssociatedTokenAccountProgramTest {
    #[allow(dead_code)]
    pub async fn start_new() -> Self {
        let ata_program = TestBenchProgram {
            program_name: "spl_associated_token_account",
            program_id: id(),
            process_instruction: processor!(process_instruction),
        };

        let bench = ProgramTestBench::start_new(&[ata_program]).await;

        Self {
            bench,
            program_id: id(),
        }
    }

    #[allow(dead_code)]
    pub async fn mint_to(
        &mut self,
        wallet_cookie: &WalletCookie,
        mint_cookie: &MintCookie,
        amount: u64,
    ) -> Result<TokenAccountCookie, ProgramError> {
        let mint_to_instruction = mint_to(
            &mint_cookie.address,
            &mint_cookie.mint_authority.pubkey(),
            &wallet_cookie.address,
            &self.bench.payer.pubkey(),
            amount,
        );

        self.bench
            .process_transaction(&[mint_to_instruction], Some(&[&mint_cookie.mint_authority]))
            .await?;

        let associated_account_address =
            get_associated_token_address(&wallet_cookie.address, &mint_cookie.address);

        Ok(TokenAccountCookie {
            address: associated_account_address,
        })
    }
}
